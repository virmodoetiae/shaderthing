( ) - Status: W - work-in-progress; X - done;

TODO ---------------------------------------------------------------------------

(X) Add project README with compilation instructions

(X) Implement export control for enabling GIF palette calculation only 
    on first frame

(X) Add settings for keyboard and mouse sensitivity for iCameraPosition,
    iCameraDirection controls

(X) Add info tooltip on iMouse row in Uniform tab

(X) Add font settings for loading Japanese & simplified 
    Chinese character sets (unloading missing but not very important...)

(X) Add save guards to prevent closing app and/or creating a new project
    by misting, to prevent loosing existing work

(X) Remove tab support from TextEditor (use only spaces for cleanliness),
    add indent/de-indent support when pressing tab/shift+tab on a text
    selection

(X) Check if possible to add support for GL_RGBA32F-formatted framebuffers
    to the OpenGLKMeansQuantizer (it is possible, OpenGLKMeansQuantizer 
    modified to achieve this)

(X) Fix layer resolution change resulting in reset of internal framebuffer 
    filtering and magnification/minimization settings to default values

(X) Prevent Ctrl+S causing project save when iCameraPosition changing due to 
    keyboard inputs (Fixed by re-mapping the LCTRL camera key to LSHIFT, not
    very creative, but the controls are likely to be reviewed anyway in the
    future)

(X) Implement layer option to select framebuffer data format (i.e., either
    store data as unsigned normalized 8-bit int or as signed 32-bit float)

(X) Fix text replace tool not triggering appearence of fragment shader 
    compilation button if some text was actually replaced

(X) Add rendering controls (to iFrame uniform) to allow pausing/resetting
    overall rendering flow. This is separate from the iTime pause/resume
    controls as in iTime is simply a time-like varying uniform that is
    not bound to the rendering process itself

(X) Re-work shader controls logic: 
    manage automatic fragment shader header addition with automatic uniform
    manager, so the user only needs to manage them via the Uniforms tab,
    instead of having to type in the uniform declarations in the shader code.
    Remove vertex shader editing in the process

(X) Add a "Commons" shader header which is automatically embedded in every
    fragment shader to enable the user to avoid core repetition (e.g., like
    in ShaderToy), inclusive of de/serialization mechanism (saves before this
    feature will not longer be compatible)

(X) Enalbe unlocking layer resolution aspect ratio from window aspect
    ratio if the layer is rendering to its internal framebuffer

(X) Implement rendering restart on window resize (to clear framebuffers) |
    For now, only iFrame is reset

(X) Add samplerResolution auto uniform on sampler2D-type uniform addition

(X) Find a way to differentiate between global/shared uniforms and uniforms
    that are specific to the Layer under consideration in the Uniforms tab |
    This was done by adding a simple hover-on infobox over uniform names
    detailing if the uniform is shared by/across all layers

(X) Fix weird behaviour of 32-bit-float-formatted internal framebuffer-rendered,
    layers | This was found to be due to alpha-blending when the alpha value is
    outside the [0-1] range, solved by disabling alpha-blending for internal 
    framebuffer-rendered layers

(X) Fix visual differences between internal framebuffer&window-rendered layers
    and window-rendered layers | These differences were also found to be due
    to alpha-blending being enabled for interla framebuffer-rendered layers,
    solved by disabling (as in the previous TODO point)

(X) Fix quantizerTool fidelity to actually represent fidelity, not clustering
    tolerance (one is qualitatively the opposite of the other)

(X) Enable find/find&replace tool function on the Common fragment shader code
    editor (currently it only works on the main fragment code editor)

(X) Adjust GLSL syntax highlighting in text editor

(W) Expand code repository section (add noise functions!)

( ) Add option to preserve transparency when exporting GIFs

( ) Add generic keyboard-based inputs as custom uniforms in addition to the 
    currently existing and unreboundable WASD-based iCameraPosition/iWASD. 
    Probably not too trivial but not particularly complex either
    
( ) Implement "replace next" occurence of found text in the find/replace tool,
    as currently only a "replace all" can be performed

( ) Add support for 3D-textures management in vir, the ShaderThing resource
    manager and uniform system

( ) Fix (or find workaround) for ImGui window icons disappearing on 
    ImGui docking/undocking actions (Windows-only, at least until I see how 
    this performs on Linux)

( ) Add example projects that can be loaded in ShaderThings as demos/tutorials

( ) Expand project README with demo images and GIFs

( ) Test compilation and running on Linux systems

( ) Test performance of ShaderThing compiled with max level optimizations (-O3)
    (note that the thirdparty library is always compiled with max optimizations,
    regardless, this only pertains vir/ and shaderthing/).
    I have a suspicion that optimizations are resulting in memory leaks on
    project loading, resource loading/unloading (it can happend indeed!)
    For the time being, the releases are compiled without optimizations (-O0)

TO-CONSIDER --------------------------------------------------------------------

*   Add pivot-mode motion to iCameraDirection/iLook w.r.t. iCameraPosition/iWASD

*   Enable option to use the quantizer palette for GIF quantization on GIF 
    exporting

*   Record video tutorial(s) of application usage, host them on YouTube, 
    possibly find a way to add tutorial links within the application.

*   Re-work the save system to leverage a more structured and update-resilient
    storage format, e.g., JSON-like files