( ) - Status: W - work-in-progress; X - done;

TODO ---------------------------------------------------------------------------

(X) Add project README with compilation instructions

(X) Implement export control for enabling GIF palette calculation only
    on first frame

(X) Add settings for keyboard and mouse sensitivity for iCameraPosition,
    iCameraDirection controls

(X) Add info tooltip on iMouse row in Uniform tab

(X) Add font settings for loading Japanese & simplified 
    Chinese character sets (unloading missing but not very important...)

(X) Add save guards to prevent closing app and/or creating a new project
    by misting, to prevent loosing existing work

(X) Remove tab support from TextEditor (use only spaces for cleanliness),
    add indent/de-indent support when pressing tab/shift+tab on a text
    selection

(X) Check if possible to add support for GL_RGBA32F-formatted framebuffers
    to the OpenGLQuantizer (it is possible, OpenGLQuantizer
    modified to achieve this)

(X) Fix layer resolution change resulting in reset of internal framebuffer
    filtering and magnification/minimization settings to default values

(X) Prevent Ctrl+S causing project save when iCameraPosition changing due to
    keyboard inputs (Fixed by re-mapping the LCTRL camera key to LSHIFT, not
    very creative, but the controls are likely to be reviewed anyway in the
    future)

(X) Implement layer option to select framebuffer data format (i.e., either
    store data as unsigned normalized 8-bit int or as signed 32-bit float)

(X) Fix text replace tool not triggering appearence of fragment shader 
    compilation button if some text was actually replaced

(X) Add rendering controls (to iFrame uniform) to allow pausing/resetting
    overall rendering flow. This is separate from the iTime pause/resume
    controls as in iTime is simply a time-like varying uniform that is
    not bound to the rendering process itself

(X) Re-work shader controls logic:
    manage automatic fragment shader header addition with automatic uniform
    manager, so the user only needs to manage them via the Uniforms tab,
    instead of having to type in the uniform declarations in the shader code.
    Remove vertex shader editing in the process

(X) Add a "Commons" shader header which is automatically embedded in every
    fragment shader to enable the user to avoid core repetition (e.g., like
    in Shader Toy), inclusive of de/serialization mechanism (saves before this
    feature will not longer be compatible)

(X) Enalbe unlocking layer resolution aspect ratio from window aspect
    ratio if the layer is rendering to its internal framebuffer

(X) Implement rendering restart on window resize (to clear framebuffers) |
    For now, only iFrame is reset

(X) Add samplerResolution auto uniform on sampler2D-type uniform addition

(X) Find a way to differentiate between global/shared uniforms and uniforms
    that are specific to the Layer under consideration in the Uniforms tab |
    This was done by adding a simple hover-on infobox over uniform names
    detailing if the uniform is shared by/across all layers

(X) Fix weird behaviour of 32-bit-float-formatted internal framebuffer-rendered,
    layers | This was found to be due to alpha-blending when the alpha value is
    outside the [0-1] range, solved by disabling alpha-blending for internal
    framebuffer-rendered layers

(X) Fix visual differences between internal framebuffer&window-rendered layers
    and window-rendered layers | These differences were also found to be due
    to alpha-blending being enabled for interla framebuffer-rendered layers,
    solved by disabling (as in the previous TODO point)

(X) Fix quantizerTool fidelity to actually represent fidelity, not clustering
    tolerance (one is qualitatively the opposite of the other)

(X) Enable find/find&replace tool function on the Common fragment shader code
    editor (currently it only works on the main fragment code editor)

(X) Adjust GLSL syntax highlighting in text editor

(X) Add option to preserve transparency when exporting GIFs

(X) Fix static linking of std, gcc, pthread libs to make executable stand-
    alone (tested only on Windows with MinGW64)

(X) Fix find/replace tool not working on uncompiled editor text

(X) Fix crash on loading of saved projects that were saved with shader
    compilation errors

(X) Add noise-related and advanced ray marching code snippets to Code repository

(X) Re-work the project save/load system to leverage a more structured and
    update-resilient storage format, e.g., JSON-like files (the file format
    is still .stf for clarity, but the internal .stf file format is now pure
    JSON)

(X) Add possibility to loop iTime variable with related controls in the Uniforms
    tab

(X) Fix missing extra checks on uniform names before them getting assembled
    into the fragment source code

(X) Add generic keyboard-based inputs as custom uniforms in addition to the
    currently existing and unreboundable WASD-based iCameraPosition/iWASD

(X) Add AnimatedTexture2D as a new resource type, which can represent either:
    1) a GIF loaded from memory OR 2) a series of existing, user-selected
    Texture2D resources which are used as frames for the animation. Make it
    such that the user has access to custom timing/loop controls for said 
    animation, which from a shared perspective behave exaclty like uniforms
    of type 'texture2D' and can be bound accordingly

(X) Add de/serialization of new AnimatedTexture2D for both "sub-types" (i.e., 
    GIFs and manually constructed animations)

(X) Add system info related to graphics cards being used and info on graphics 
    context (e.g., OpenGL version in use) to top-level app menu, under "Help"

(X) Add mipmap minimization filter option for Layer-type resources

(X) Add system info (OpenGL version & graphics card vendor info) to a tab
    in the main menu

(X) Fix compilation of shared fragment source not affecting/not being reflected
    in all layers

(X) Refactor 'Effects' management, such that each Layer can have its own set of
    effects, not renamed to 'PostProcess'es. Refactor Quantizer class into such
    novel scheme

(X) Implemente Bloom as a new post process effect (i.e., just like the 
    Quantizer). This was achieved by first developing a compute-shader based
    Bloomer in the vir lib and wrapping it in a new ShaderThing::PostProcess

(X) Implemente Blur as a new post process effect (i.e., just like the 
    Quantizer). This was achieved by first developing a compute-shader based
    Blurrer in the vir lib and wrapping it in a new ShaderThing::PostProcess

(X) Test performance of ShaderThing compiled with max level optimizations (-O3)6
    (note that the thirdparty library is always compiled with max optimizations,
    regardless, this only pertains to vir/ and shaderthing/).
    Memory leaks and/or segfaults seem to habe been solved by disabling
    delete-pointer-checks when compiling with optimizations, but it is still
    being test

(X) Implement additional keyboard-input-uniform management, however on a global
    basis (i.e., a uniform with the state of all the keys, e.g., like done in
    ShaderToy via a dedicated texture uniform just for that) instead of local
    basis as it is currently implemented (i.e., one key -> one uniform). This
    was ultimately achieved via an array of vec3s via a uniform buffer object

(X) Fix (or find workaround) for ImGui window icons disappearing on
    ImGui docking/undocking actions (Windows-only, at least until I see how
    this performs on Linux)

(X) Add option to disable iFrame reset to 0 on framebuffer export finish (as
    some shaders might actively check for iFrame == 0 in order to initialize
    their framebuffers from scratch)

(X) Implement framebuffer content re-sizing on framebuffer rebuild, instead of
    loosing its contents on every re-size

(X) Check if possible to integrate additional shared output SSBO in order to
    provide an additional output 'channel' for a fragment shader, which is
    independent of the fragment/pixel being processed. Can be handy in a variety
    of applications (e.g., finally tallying scalar results in Monte Carlo-like
    simulations!)

(X) Implement lightweight quantizer palette manager with a default palette
    library

(X) Fix quantizer not working if source framebuffer minimization filter set
    to any of the mipmap filters

(X) Enable compilation and running on at least one Unix system, tested on 
    Ubuntu 22 LTS

(X) Fix GIF exporting when either width or height are not a power of 2

(X) Implement whole-animation averaged palette calculation as additional option
    when exporting GIFs

(X) Fix Animation2D-type resource internal time not being managed correctly
    during exports | Currently, only animations whose timing is bound to iTime
    will be handled properly during exports (i.e., their time will be set to 
    the export start time)

(X) Fix quantization issues when exporting a GIF of a layer which already
    includes quantization

(X) Solve time getting reset on Image-type export

(X) Implement customizable ShaderThing project auto-save feature

(X) Implement blank texture2D creator for use as data storage. This is tightly
    related to the next item on the list

(X) Implement image-type uniforms to enable write operations from within the 
    layers' fragment shader to destinations other than fragColor, such as 
    texture2D targets, which can act as custom, flexible, non-SSBO-based shared
    storage

(X) Implement OpenGL extension explorer to allow enabling and/or disabling
    specific extensions based on the user system's availability. This is
    useful for e.g., enabling support for 64-bit data types

(X) Make the shared storage SSBO fully dynamically settable, i.e., allow the 
    user to set custom data types, inclusive of 64-bit types, for the integer 
    (ssiData) and floating point (ssfData) data arrays, as well as a custom 
    size for each array, all at runtime

(W) Add example projects that can be loaded in ShaderThings as demos/tutorials.
    This is currently being implemented under Help->Examples

(W) Expand the Help->Code Repository section

(W) Expand project README with demo images and GIFs

( ) Add dynamic mip-map auto-regeneration option (enabling which regenerates the
    mip-maps on every render call, useful for textures updated very frequently) 
    for all Texture-2D objects that use any mip-map-based mag/min filtering
    option

( ) [vir & shaderthing] Implement an actual internal logging system

( ) Implement layer cloning (for convenience)

( ) Implement "replace next" occurence of found text in the find/replace tool,
    as currently only a "replace all" can be performed

TO-CONSIDER --------------------------------------------------------------------

*   Allow a layer to represent a compute shader instead of a fragment shader,
    giving the user control of its type at runtime.
    This is technically possible and would make sense given the recent addition
    of custom storage textures and image-type uniforms enabing arbitrary data
    input-output. However, I will need to carefully evaluate this, as it would
    be no small feature from an implementation standpoint

*   Add possibility of rendering to cubemaps (e.g., adding a type selector for
    any layer's internal framebuffer 'type': either a Texture2D framebuffer or
    a Cubemap framebuffer). This is probably a lot of work for a feature I don't
    see very often in the shader art community

*   Add support for 3D-textures management in vir, the ShaderThing resource
    manager and uniform system. This isn't a lot of work but it's a feature I 
    don't see very often in the shader art community

*   Record video tutorial(s) of program usage, host them on YouTube, 
    possibly find a way to add tutorial links within the program